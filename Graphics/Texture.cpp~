// Texture.cpp


#include <iostream>
#include <GL/freeglut.h>
#include <GL/glut.h>
#include <GL/glext.h>
#include "Texture.h"
#include "Image.h"
using namespace std;

int Texture :: texNum = 0;


Texture::Texture(string fileName) {

	name = fileName.c_str();

	image = new Image(fileName);

	glGenTextures(1, &m_textureObj);
	glBindTexture(GL_TEXTURE_2D, m_textureObj);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0);

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); 
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		
		glPixelStoref(GL_PACK_ROW_LENGTH,1);
		glPixelStoref(GL_PACK_SKIP_PIXELS,1);
		glPixelStoref(GL_PACK_SKIP_ROWS,1);
		glPixelStoref(GL_PACK_ALIGNMENT,1);


	unsigned char* data = new unsigned char[getWidth()*getHeight()*4];
	image->interleave(data);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, getWidth(), getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
	glBindTexture(GL_TEXTURE_2D, 0);
}


Texture::Texture(string fileName, bool isFont) {

	name = fileName.c_str();

	image = new Image(fileName);

	glGenTextures(1, &m_textureObj);
	glBindTexture(GL_TEXTURE_2D, m_textureObj);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0);

	if(isFont) {
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST); 
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	}
	else {
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); 
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	}
		
		glPixelStoref(GL_PACK_ROW_LENGTH,1);
		glPixelStoref(GL_PACK_SKIP_PIXELS,1);
		glPixelStoref(GL_PACK_SKIP_ROWS,1);
		glPixelStoref(GL_PACK_ALIGNMENT,1);


	unsigned char* data = new unsigned char[getWidth()*getHeight()*4];
	image->interleave(data);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, getWidth(), getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
	glBindTexture(GL_TEXTURE_2D, 0);
}


Texture::Texture(string myName, const string& fileName) {

	name = myName.c_str();

	image = new Image(fileName);

	glGenTextures(1, &m_textureObj);
	glBindTexture(GL_TEXTURE_2D, m_textureObj);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0);

	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); 
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		
		glPixelStoref(GL_PACK_ROW_LENGTH,1);
		glPixelStoref(GL_PACK_SKIP_PIXELS,1);
		glPixelStoref(GL_PACK_SKIP_ROWS,1);
		glPixelStoref(GL_PACK_ALIGNMENT,1);


	unsigned char* data = new unsigned char[getWidth()*getHeight()*4];
	image->interleave(data);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, getWidth(), getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
	glBindTexture(GL_TEXTURE_2D, 0);
}


Texture::Texture(string myName, const string& fileName, bool isFont) {

	name = myName.c_str();
	
	for(int i = 0; i < 1000000; i++)
		cout << name << endl;

	image = new Image(fileName);

	glGenTextures(1, &m_textureObj);
	glBindTexture(GL_TEXTURE_2D, m_textureObj);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_BASE_LEVEL, 0);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAX_LEVEL, 0);

	if(isFont) {
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST); 
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	}
	else {
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); 
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	}
		
		glPixelStoref(GL_PACK_ROW_LENGTH,1);
		glPixelStoref(GL_PACK_SKIP_PIXELS,1);
		glPixelStoref(GL_PACK_SKIP_ROWS,1);
		glPixelStoref(GL_PACK_ALIGNMENT,1);


	unsigned char* data = new unsigned char[getWidth()*getHeight()*4];
	image->interleave(data);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, getWidth(), getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
	glBindTexture(GL_TEXTURE_2D, 0);
}


string Texture :: getName() {
	return name;
}

int Texture :: getWidth() {
	return image->getWidth();
}

int Texture :: getHeight() {
	return image->getHeight();
}


void Texture::bind() {
	bind(GL_TEXTURE0);
}
void Texture::bind(GLenum TextureUnit) {
	glActiveTexture(TextureUnit);
	glBindTexture(GL_TEXTURE_2D, m_textureObj);
}

void Texture::unbind() {
	unbind(GL_TEXTURE0);
}
void Texture::unbind(GLenum TextureUnit) {
	glActiveTexture(TextureUnit);
	glBindTexture(GL_TEXTURE_2D, 0);
}
